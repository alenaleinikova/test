// TemplateX Block



// Block Placeholder

@function txf-stripe($color) {
  $transparent: rgba($color, 0);
  @return linear-gradient(135deg, $color, $color 12.5%, $transparent 12.5%, $transparent 37.5%, $color 37.5%, $color 62.5%, $transparent 62.5%, $transparent 87.5%, $color 87.5%, $color);
}

@mixin tx-stripes($width, $color: $red) {
  $side: #{txf-sqrt(txf-pow(txf-stripUnit($width) * 4, 2) / 2)}px;
  background-image: txf-stripe($color);
  background-size: $side $side;
}

@mixin tx-block($color: $red) {
  @include tx-stripes(1.5px, $color);
}

@mixin tx-icon($width: 15px, $height: 15px) {
  @include tx-block;
  width: $width;
  height: $height;
}



// Inline Block

@mixin tx-inline-block($ie: $tx-IE, $extend: true) {
  @if $ie != true {
    display: inline-block;
  } @else {
    display: inline;
    zoom: 1;
  }
}



// Pseudo Element

@mixin tx-pseudo($position: absolute, $display: block, $content: '', $ie: $tx-IE, $extend: true) {
  @if $position == 'absolute' and $display == 'block' and $content == '' and $extend == true {
    position: absolute;
    content: '';
    display: block;
  } @else {
    @if $display == 'inline-block' {
      @include tx-inline-block;
    } @else {
      display: $display;
    }
    @if not $ie {
      content: '' + $content;
    }
    position: $position;
  }
}

@mixin tx-pseudo-ie($before: true, $after: true, $class: '', $beforeContent: '', $afterContent: '') {
  $beforeClass: ieBefore + $class;
  $afterClass: ieAfter + $class;
  @if $before == true and $after == true {
    zoom: unquote('expression(this.runtimeStyle.zoom = 1, insertAdjacentHTML("afterBegin", "<i class="' + $beforeClass + '">' + $beforeContent + '</i>"), insertAdjacentHTML("beforeEnd", "<i class="' + $afterClass + '">' + $afterContent + '</i>"))');
  } @else if $before == true {
    zoom: unquote('expression(this.runtimeStyle.zoom = 1, insertAdjacentHTML("afterBegin", "<i class="' + $beforeClass + '">' + $beforeContent + '</i>"))');
  } @else {
    zoom: unquote('expression(this.runtimeStyle.zoom = 1, insertAdjacentHTML("beforeEnd", "<i class="' + $afterClass + '">' + $afterContent + '</i>"))');
  }
}



// Vertical Alignment

@mixin tx-pseudo-va {
  position: relative;
  content: '';
  display: inline-block;
  width: 0;
  height: 100%;
  vertical-align: middle;
}



// Layers

@mixin tx-layer($layer: content, $shift: 0) {
  @if $layer == 'over' {
    z-index: (200 + $shift);
  } @else if $layer == 'top' {
    z-index: (100 + $shift);
  } @else if $layer == 'content' {
    z-index: (50 + $shift);
  } @else if $layer == 'bottom' {
    z-index: (0 + $shift);
  } @else if $layer == 'under' {
    z-index: (-1 - $shift);
  }
}



// Max Width

@mixin tx-max-width($width, $fallback: $remFallback, $inPixels: false) {
  @if $inPixels == true {
    $fallback: true;
  }
  @if $fallback == true {
    max-width: $width;
  }
  @if $inPixels == false {
    max-width: ($width / $fontSize) * 1rem;
  }
}



// Slide Down

@mixin tx-slide-down($maxHeight, $activeClass: '-is-active') {
  max-height: 0;

  &-#{$activeClass} {
    max-height: $maxHeight;
  }

}
